#include "../Model/Entity.h"
#include "LevelWindow.h"
#include <SFML/Graphics.hpp>
#include <iostream>
#include <utility>

class ParticleSystem : public Entity {
public:

    ParticleSystem(unsigned int count) :
    m_particles(count),
    m_vertices(sf::Points, count),
    m_lifetime(4000),
    m_emitter(0, 0)
    {
    }

    void setEmitter(double x, double y)
    {
        m_emitter = std::make_pair(x, y);
    }

    void update(double elapsed)
    {
        for (std::size_t i = 0; i < m_particles.size(); ++i)
        {
            // update the particle lifetime
            Particle& p = m_particles[i];
            p.lifetime -= elapsed;

            // if the particle is dead, respawn it
            if (p.lifetime <= 0)
                resetParticle(i);

            // update the position of the corresponding vertex
            m_vertices[i].position += sf::Vector2f(p.velocity.first * elapsed, p.velocity.second * elapsed);

            // update the alpha (transparency) of the particle according to its lifetime
            float ratio = p.lifetime / m_lifetime;
            m_vertices[i].color.r = static_cast<sf::Uint8>(ratio * 255);
            m_vertices[i].color.g = static_cast<sf::Uint8>(255 - (ratio * 255));
            m_vertices[i].color.b = static_cast<sf::Uint8>(255 - (ratio * 255)/2);
        }
    }

    virtual void draw(LevelWindow* lw) const
    {
	lw->draw(m_vertices);
    }

private:

    struct Particle
    {
        std::pair<float, float> velocity;
        double lifetime;
    };

    void resetParticle(std::size_t index)
    {
        // give a random velocity and lifetime to the particle
        float angle = (std::rand() % 360) * 3.14f / 180.f;
        float speed = (std::rand() % 50)/100 + 0.1f;
        m_particles[index].velocity = std::make_pair(std::cos(angle) * speed, std::sin(angle) * speed);
        m_particles[index].lifetime = ((std::rand() % 100) + 3000);

        // reset the position of the corresponding vertex
        m_vertices[index].position = sf::Vector2f(m_emitter.first, m_emitter.second);
    }

    std::vector<Particle> m_particles;
    sf::VertexArray m_vertices;
    double m_lifetime;
    std::pair<double, double> m_emitter;
};

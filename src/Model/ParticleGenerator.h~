//==============================================================================================================================
// Name        : ParticleGenerator.h
// Author      : Jeroen Verstraelen
// Version     :
// Description : Represents a virtual location that can generate particles.
//==============================================================================================================================

#ifndef PARTICLEGENERATOR_H_
#define PARTICLEGENERATOR_H_

#include <tuple> 
#include "Entity.h"
#include "../View/Observer.h"

namespace si {
namespace model {

/** 
 * A type of particle generation.
 */
enum ParticleType { EXPLOSION, CONTINUOUS };

/** 
 * Represents a particle with a location, lifetime and velocity.
 */
struct Particle {
	std::pair<double, double> position;
	std::pair<float, float> velocity;
	double lifetime;
};

class ParticleGenerator : public Entity{
	private:

		/** 
		 * Resets the given particle.
		 */
		void resetParticle(std::size_t index);

		/** 
		 * A vector of all the particles generated by an instance.
		 */
		std::vector<Particle> _m_particles;

		/** 
		 * The location to emit from.
		 */		
		std::pair<double, double> _m_emitter;

		/** 
		 * The type of particle generation.
		 */	
		ParticleType _type;

		/** 
		 * Observers to be notified.
		 */
		std::vector<view::Observer*> _observers;

		/** 
		 * The RGB values of the particles.
		 */
		std::tuple<int, int, int> _rgb = std::make_tuple(200, 50, 0);

	public:

		/** 
		 * Constructor.
		 * @param observer The observers to notify when the model changes.
		 * @param count The amount of particles to use.
		 * @param type The type of generation to use.
		 */
		ParticleGenerator(std::vector<view::Observer*> observers, unsigned int count, ParticleType type);

		/** 
		 * Destructor.
		 */
		~ParticleGenerator();

		/** 
		 * Sets the location to emit from.
		 * @param x The location on the x-axis.
		 * @param y The location on the y-axis.
		 */
		void setEmitter(double x, double y);

		/** 
		 * Updates the particles given the elapsed time of the last tick.
		 * @param elapsed The elapsed time of the last tick.
		 * @return Whether to delete the generator after this update.
		 */
    		bool update(double elapsed);

		/** 
		 * Notify the observers that the generator needs to be drawn.
		 */
		void notifyDraw();

		/** 
		 * Returns all the particles that are generated by this instance.
		 * @return The particles generated by this instance.
		 */
		std::vector<Particle> const& getParticles() const;

		/** 
		 * Returns the RGB values of the particles.
		 * @return The RGB values of the particles.
		 */
		std::tuple<int, int, int>const& getRGB() const;
};

} // Namespace model
} // Namespace si
#endif /* PARTICLEGENERATOR_H_ */
